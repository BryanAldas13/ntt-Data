name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # Solo ejecuta el pipeline cuando hay cambios en la rama main
  workflow_dispatch:  # Permite ejecuciones manuales desde GitHub Actions

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout del código
        uses: actions/checkout@v4  # Descarga el código desde GitHub

      - name: 🔧 Configurar Java y Maven
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'  # JDK de Eclipse Temurin
          java-version: '17'       # Versión 17

      - name: 📦 Instalar dependencias
        run: mvn install --no-transfer-progress  # Instala dependencias

      - name: 🏗️ Compilar la aplicación
        run: mvn clean package  # Genera el JAR

      - name: 📂 Guardar artefactos para Test
        uses: actions/upload-artifact@v4  # Guarda el JAR para la siguiente fase
        with:
          name: app-jar
          path: target/*.jar  # Ruta donde se genera el JAR

  test:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Descargar artefactos del Build
        uses: actions/download-artifact@v4
        with:
          name: app-jar
          path: target  # Ubicación del JAR

      - name: 🧪 Ejecutar pruebas
        run: mvn test  # Ejecuta pruebas unitarias

  docker-build:
    needs: test  # Solo se ejecuta si las pruebas pasaron
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout del código
        uses: actions/checkout@v4

      - name: 🔑 Iniciar sesión en Docker Hub
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: 🐳 Construir y subir imagen Docker
        run: |
          IMAGE_TAG=latest
          docker build -t ${{ secrets.DOCKER_USERNAME }}/ms-devops:$IMAGE_TAG .
          docker push ${{ secrets.DOCKER_USERNAME }}/ms-devops:$IMAGE_TAG
