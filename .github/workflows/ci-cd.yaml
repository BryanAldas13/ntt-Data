name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # Solo ejecuta el pipeline cuando hay cambios en la rama main
  workflow_dispatch:  # Permite ejecuciones manuales desde GitHub Actions
    inputs:
      version:
        description: "Versi√≥n de la imagen Docker (ej. v1.0.0)"
        required: true
        default: "latest"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout del c√≥digo
        uses: actions/checkout@v4

      - name: üîß Configurar Java y Maven
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: üì¶ Instalar dependencias
        run: mvn install --no-transfer-progress

      - name: üèóÔ∏è Compilar la aplicaci√≥n
        run: mvn clean package

      - name: üìÇ Guardar artefactos para Test
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: target/*.jar  # Guarda el .jar para usarlo en el siguiente job

  test:
    needs: build  # Solo se ejecuta si la etapa de Build fue exitosa
    runs-on: ubuntu-latest

    steps:
      - name: üì• Descargar artefactos del Build
        uses: actions/download-artifact@v4
        with:
          name: app-jar
          path: target

      - name: üß™ Ejecutar pruebas
        run: mvn test

  docker:
    needs: test  # Solo se ejecuta si la etapa de Test fue exitosa
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout del c√≥digo
        uses: actions/checkout@v4

      - name: üîë Iniciar sesi√≥n en Docker Hub
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: üè∑Ô∏è Definir versi√≥n de la imagen
        id: vars
        env:
          INPUT_VERSION: ${{ github.event.inputs.version }}
        run: |
          if [[ -z "$INPUT_VERSION" || "$INPUT_VERSION" == "latest" ]]; then
            VERSION=$(echo $GITHUB_SHA | cut -c1-7)  # Usa el SHA corto del commit como versi√≥n
          else
            VERSION=$INPUT_VERSION
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: üê≥ Construir y subir imagen Docker
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/ms-devops:$VERSION .
          docker push ${{ secrets.DOCKER_USERNAME }}/ms-devops:$VERSION
          
          # Opcionalmente, actualizar la etiqueta "latest"
          docker tag ${{ secrets.DOCKER_USERNAME }}/ms-devops:$VERSION ${{ secrets.DOCKER_USERNAME }}/ms-devops:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/ms-devops:latest

      - name: üîî Notificar versi√≥n generada
        run: echo "La imagen Docker fue publicada con la versi√≥n $VERSION"